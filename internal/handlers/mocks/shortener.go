// Code generated by MockGen. DO NOT EDIT.
// Source: shortener.go
//
// Generated by this command:
//
//	mockgen.exe -source=shortener.go -destination=./mocks/shortener.go -package=handlersmock
//
// Package handlersmock is a generated GoMock package.
package handlersmock

import (
	context "context"
	reflect "reflect"

	domain "github.com/MowlCoder/go-url-shortener/internal/domain"
	models "github.com/MowlCoder/go-url-shortener/internal/storage/models"
	gomock "go.uber.org/mock/gomock"
)

// MockURLStorage is a mock of URLStorage interface.
type MockURLStorage struct {
	ctrl     *gomock.Controller
	recorder *MockURLStorageMockRecorder
}

// MockURLStorageMockRecorder is the mock recorder for MockURLStorage.
type MockURLStorageMockRecorder struct {
	mock *MockURLStorage
}

// NewMockURLStorage creates a new mock instance.
func NewMockURLStorage(ctrl *gomock.Controller) *MockURLStorage {
	mock := &MockURLStorage{ctrl: ctrl}
	mock.recorder = &MockURLStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLStorage) EXPECT() *MockURLStorageMockRecorder {
	return m.recorder
}

// DeleteByShortURLs mocks base method.
func (m *MockURLStorage) DeleteByShortURLs(ctx context.Context, shortURLs []string, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByShortURLs", ctx, shortURLs, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByShortURLs indicates an expected call of DeleteByShortURLs.
func (mr *MockURLStorageMockRecorder) DeleteByShortURLs(ctx, shortURLs, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByShortURLs", reflect.TypeOf((*MockURLStorage)(nil).DeleteByShortURLs), ctx, shortURLs, userID)
}

// GetByShortURL mocks base method.
func (m *MockURLStorage) GetByShortURL(ctx context.Context, shortURL string) (*models.ShortenedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortURL", ctx, shortURL)
	ret0, _ := ret[0].(*models.ShortenedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShortURL indicates an expected call of GetByShortURL.
func (mr *MockURLStorageMockRecorder) GetByShortURL(ctx, shortURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortURL", reflect.TypeOf((*MockURLStorage)(nil).GetByShortURL), ctx, shortURL)
}

// GetURLsByUserID mocks base method.
func (m *MockURLStorage) GetURLsByUserID(ctx context.Context, userID string) ([]models.ShortenedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLsByUserID", ctx, userID)
	ret0, _ := ret[0].([]models.ShortenedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLsByUserID indicates an expected call of GetURLsByUserID.
func (mr *MockURLStorageMockRecorder) GetURLsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLsByUserID", reflect.TypeOf((*MockURLStorage)(nil).GetURLsByUserID), ctx, userID)
}

// Ping mocks base method.
func (m *MockURLStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockURLStorageMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockURLStorage)(nil).Ping), ctx)
}

// SaveSeveralURL mocks base method.
func (m *MockURLStorage) SaveSeveralURL(ctx context.Context, dtos []domain.SaveShortURLDto) ([]models.ShortenedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSeveralURL", ctx, dtos)
	ret0, _ := ret[0].([]models.ShortenedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveSeveralURL indicates an expected call of SaveSeveralURL.
func (mr *MockURLStorageMockRecorder) SaveSeveralURL(ctx, dtos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSeveralURL", reflect.TypeOf((*MockURLStorage)(nil).SaveSeveralURL), ctx, dtos)
}

// SaveURL mocks base method.
func (m *MockURLStorage) SaveURL(ctx context.Context, dto domain.SaveShortURLDto) (*models.ShortenedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", ctx, dto)
	ret0, _ := ret[0].(*models.ShortenedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockURLStorageMockRecorder) SaveURL(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockURLStorage)(nil).SaveURL), ctx, dto)
}

// MockStringGeneratorService is a mock of StringGeneratorService interface.
type MockStringGeneratorService struct {
	ctrl     *gomock.Controller
	recorder *MockStringGeneratorServiceMockRecorder
}

// MockStringGeneratorServiceMockRecorder is the mock recorder for MockStringGeneratorService.
type MockStringGeneratorServiceMockRecorder struct {
	mock *MockStringGeneratorService
}

// NewMockStringGeneratorService creates a new mock instance.
func NewMockStringGeneratorService(ctrl *gomock.Controller) *MockStringGeneratorService {
	mock := &MockStringGeneratorService{ctrl: ctrl}
	mock.recorder = &MockStringGeneratorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringGeneratorService) EXPECT() *MockStringGeneratorServiceMockRecorder {
	return m.recorder
}

// GenerateRandom mocks base method.
func (m *MockStringGeneratorService) GenerateRandom() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandom")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateRandom indicates an expected call of GenerateRandom.
func (mr *MockStringGeneratorServiceMockRecorder) GenerateRandom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandom", reflect.TypeOf((*MockStringGeneratorService)(nil).GenerateRandom))
}

// MockDeleteURLQueue is a mock of DeleteURLQueue interface.
type MockDeleteURLQueue struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteURLQueueMockRecorder
}

// MockDeleteURLQueueMockRecorder is the mock recorder for MockDeleteURLQueue.
type MockDeleteURLQueueMockRecorder struct {
	mock *MockDeleteURLQueue
}

// NewMockDeleteURLQueue creates a new mock instance.
func NewMockDeleteURLQueue(ctrl *gomock.Controller) *MockDeleteURLQueue {
	mock := &MockDeleteURLQueue{ctrl: ctrl}
	mock.recorder = &MockDeleteURLQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteURLQueue) EXPECT() *MockDeleteURLQueueMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockDeleteURLQueue) Push(task *domain.DeleteURLsTask) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Push", task)
}

// Push indicates an expected call of Push.
func (mr *MockDeleteURLQueueMockRecorder) Push(task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockDeleteURLQueue)(nil).Push), task)
}
