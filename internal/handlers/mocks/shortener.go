// Code generated by MockGen. DO NOT EDIT.
// Source: shortener.go
//
// Generated by this command:
//
//	mockgen -source=shortener.go -destination=./mocks/shortener.go -package=handlersmock
//
// Package handlersmock is a generated GoMock package.
package handlersmock

import (
	context "context"
	reflect "reflect"

	domain "github.com/MowlCoder/go-url-shortener/internal/domain"
	models "github.com/MowlCoder/go-url-shortener/internal/storage/models"
	gomock "go.uber.org/mock/gomock"
)

// MockurlStorageForHandler is a mock of urlStorageForHandler interface.
type MockurlStorageForHandler struct {
	ctrl     *gomock.Controller
	recorder *MockurlStorageForHandlerMockRecorder
}

// MockurlStorageForHandlerMockRecorder is the mock recorder for MockurlStorageForHandler.
type MockurlStorageForHandlerMockRecorder struct {
	mock *MockurlStorageForHandler
}

// NewMockurlStorageForHandler creates a new mock instance.
func NewMockurlStorageForHandler(ctrl *gomock.Controller) *MockurlStorageForHandler {
	mock := &MockurlStorageForHandler{ctrl: ctrl}
	mock.recorder = &MockurlStorageForHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockurlStorageForHandler) EXPECT() *MockurlStorageForHandlerMockRecorder {
	return m.recorder
}

// DeleteByShortURLs mocks base method.
func (m *MockurlStorageForHandler) DeleteByShortURLs(ctx context.Context, shortURLs []string, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByShortURLs", ctx, shortURLs, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByShortURLs indicates an expected call of DeleteByShortURLs.
func (mr *MockurlStorageForHandlerMockRecorder) DeleteByShortURLs(ctx, shortURLs, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByShortURLs", reflect.TypeOf((*MockurlStorageForHandler)(nil).DeleteByShortURLs), ctx, shortURLs, userID)
}

// GetByShortURL mocks base method.
func (m *MockurlStorageForHandler) GetByShortURL(ctx context.Context, shortURL string) (*models.ShortenedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortURL", ctx, shortURL)
	ret0, _ := ret[0].(*models.ShortenedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShortURL indicates an expected call of GetByShortURL.
func (mr *MockurlStorageForHandlerMockRecorder) GetByShortURL(ctx, shortURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortURL", reflect.TypeOf((*MockurlStorageForHandler)(nil).GetByShortURL), ctx, shortURL)
}

// GetInternalStats mocks base method.
func (m *MockurlStorageForHandler) GetInternalStats(ctx context.Context) (*domain.InternalStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInternalStats", ctx)
	ret0, _ := ret[0].(*domain.InternalStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInternalStats indicates an expected call of GetInternalStats.
func (mr *MockurlStorageForHandlerMockRecorder) GetInternalStats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInternalStats", reflect.TypeOf((*MockurlStorageForHandler)(nil).GetInternalStats), ctx)
}

// GetURLsByUserID mocks base method.
func (m *MockurlStorageForHandler) GetURLsByUserID(ctx context.Context, userID string) ([]models.ShortenedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLsByUserID", ctx, userID)
	ret0, _ := ret[0].([]models.ShortenedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLsByUserID indicates an expected call of GetURLsByUserID.
func (mr *MockurlStorageForHandlerMockRecorder) GetURLsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLsByUserID", reflect.TypeOf((*MockurlStorageForHandler)(nil).GetURLsByUserID), ctx, userID)
}

// Ping mocks base method.
func (m *MockurlStorageForHandler) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockurlStorageForHandlerMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockurlStorageForHandler)(nil).Ping), ctx)
}

// SaveSeveralURL mocks base method.
func (m *MockurlStorageForHandler) SaveSeveralURL(ctx context.Context, dtos []domain.SaveShortURLDto) ([]models.ShortenedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSeveralURL", ctx, dtos)
	ret0, _ := ret[0].([]models.ShortenedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveSeveralURL indicates an expected call of SaveSeveralURL.
func (mr *MockurlStorageForHandlerMockRecorder) SaveSeveralURL(ctx, dtos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSeveralURL", reflect.TypeOf((*MockurlStorageForHandler)(nil).SaveSeveralURL), ctx, dtos)
}

// SaveURL mocks base method.
func (m *MockurlStorageForHandler) SaveURL(ctx context.Context, dto domain.SaveShortURLDto) (*models.ShortenedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", ctx, dto)
	ret0, _ := ret[0].(*models.ShortenedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockurlStorageForHandlerMockRecorder) SaveURL(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockurlStorageForHandler)(nil).SaveURL), ctx, dto)
}

// MockstringGeneratorService is a mock of stringGeneratorService interface.
type MockstringGeneratorService struct {
	ctrl     *gomock.Controller
	recorder *MockstringGeneratorServiceMockRecorder
}

// MockstringGeneratorServiceMockRecorder is the mock recorder for MockstringGeneratorService.
type MockstringGeneratorServiceMockRecorder struct {
	mock *MockstringGeneratorService
}

// NewMockstringGeneratorService creates a new mock instance.
func NewMockstringGeneratorService(ctrl *gomock.Controller) *MockstringGeneratorService {
	mock := &MockstringGeneratorService{ctrl: ctrl}
	mock.recorder = &MockstringGeneratorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstringGeneratorService) EXPECT() *MockstringGeneratorServiceMockRecorder {
	return m.recorder
}

// GenerateRandom mocks base method.
func (m *MockstringGeneratorService) GenerateRandom() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandom")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateRandom indicates an expected call of GenerateRandom.
func (mr *MockstringGeneratorServiceMockRecorder) GenerateRandom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandom", reflect.TypeOf((*MockstringGeneratorService)(nil).GenerateRandom))
}

// MockdeleteURLQueue is a mock of deleteURLQueue interface.
type MockdeleteURLQueue struct {
	ctrl     *gomock.Controller
	recorder *MockdeleteURLQueueMockRecorder
}

// MockdeleteURLQueueMockRecorder is the mock recorder for MockdeleteURLQueue.
type MockdeleteURLQueueMockRecorder struct {
	mock *MockdeleteURLQueue
}

// NewMockdeleteURLQueue creates a new mock instance.
func NewMockdeleteURLQueue(ctrl *gomock.Controller) *MockdeleteURLQueue {
	mock := &MockdeleteURLQueue{ctrl: ctrl}
	mock.recorder = &MockdeleteURLQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdeleteURLQueue) EXPECT() *MockdeleteURLQueueMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockdeleteURLQueue) Push(task *domain.DeleteURLsTask) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Push", task)
}

// Push indicates an expected call of Push.
func (mr *MockdeleteURLQueueMockRecorder) Push(task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockdeleteURLQueue)(nil).Push), task)
}
