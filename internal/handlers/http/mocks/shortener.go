// Code generated by MockGen. DO NOT EDIT.
// Source: shortener.go
//
// Generated by this command:
//
//	mockgen -source=shortener.go -destination=./mocks/shortener.go -package=handlersmock
//
// Package handlersmock is a generated GoMock package.
package handlersmock

import (
	context "context"
	reflect "reflect"

	domain "github.com/MowlCoder/go-url-shortener/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockshortenerService is a mock of shortenerService interface.
type MockshortenerService struct {
	ctrl     *gomock.Controller
	recorder *MockshortenerServiceMockRecorder
}

// MockshortenerServiceMockRecorder is the mock recorder for MockshortenerService.
type MockshortenerServiceMockRecorder struct {
	mock *MockshortenerService
}

// NewMockshortenerService creates a new mock instance.
func NewMockshortenerService(ctrl *gomock.Controller) *MockshortenerService {
	mock := &MockshortenerService{ctrl: ctrl}
	mock.recorder = &MockshortenerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockshortenerService) EXPECT() *MockshortenerServiceMockRecorder {
	return m.recorder
}

// DeleteURLs mocks base method.
func (m *MockshortenerService) DeleteURLs(ctx context.Context, urls []string, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURLs", ctx, urls, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURLs indicates an expected call of DeleteURLs.
func (mr *MockshortenerServiceMockRecorder) DeleteURLs(ctx, urls, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURLs", reflect.TypeOf((*MockshortenerService)(nil).DeleteURLs), ctx, urls, userID)
}

// GetByShortURL mocks base method.
func (m *MockshortenerService) GetByShortURL(ctx context.Context, url string) (*domain.ShortenedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortURL", ctx, url)
	ret0, _ := ret[0].(*domain.ShortenedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShortURL indicates an expected call of GetByShortURL.
func (mr *MockshortenerServiceMockRecorder) GetByShortURL(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortURL", reflect.TypeOf((*MockshortenerService)(nil).GetByShortURL), ctx, url)
}

// GetInternalStats mocks base method.
func (m *MockshortenerService) GetInternalStats(ctx context.Context) (*domain.InternalStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInternalStats", ctx)
	ret0, _ := ret[0].(*domain.InternalStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInternalStats indicates an expected call of GetInternalStats.
func (mr *MockshortenerServiceMockRecorder) GetInternalStats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInternalStats", reflect.TypeOf((*MockshortenerService)(nil).GetInternalStats), ctx)
}

// GetUserURLs mocks base method.
func (m *MockshortenerService) GetUserURLs(ctx context.Context, userID string) ([]domain.ShortenedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", ctx, userID)
	ret0, _ := ret[0].([]domain.ShortenedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockshortenerServiceMockRecorder) GetUserURLs(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*MockshortenerService)(nil).GetUserURLs), ctx, userID)
}

// Ping mocks base method.
func (m *MockshortenerService) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockshortenerServiceMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockshortenerService)(nil).Ping), ctx)
}

// ShortBatchURL mocks base method.
func (m *MockshortenerService) ShortBatchURL(ctx context.Context, urls []domain.ShortBatchURL, userID string) ([]domain.ShortBatchURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortBatchURL", ctx, urls, userID)
	ret0, _ := ret[0].([]domain.ShortBatchURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortBatchURL indicates an expected call of ShortBatchURL.
func (mr *MockshortenerServiceMockRecorder) ShortBatchURL(ctx, urls, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortBatchURL", reflect.TypeOf((*MockshortenerService)(nil).ShortBatchURL), ctx, urls, userID)
}

// ShortURL mocks base method.
func (m *MockshortenerService) ShortURL(ctx context.Context, url, userID string) (*domain.ShortenedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortURL", ctx, url, userID)
	ret0, _ := ret[0].(*domain.ShortenedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortURL indicates an expected call of ShortURL.
func (mr *MockshortenerServiceMockRecorder) ShortURL(ctx, url, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortURL", reflect.TypeOf((*MockshortenerService)(nil).ShortURL), ctx, url, userID)
}
